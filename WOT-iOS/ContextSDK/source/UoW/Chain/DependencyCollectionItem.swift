//
//  DependencyCollectionItem.swift
//  ContextSDK
//
//  Created by Paul on 4.02.23.
//

typealias DependencyCollectionItemType = Hashable & Equatable & Comparable

// MARK: - DependencyCollectionItem

struct DependencyCollectionItem<T: DependencyCollectionItemType>: DependencyCollectionItemType {

    let subject: T
    let completed: Bool

    // MARK: Lifecycle

    init(subject: T, completed: Bool) {
        self.subject = subject
        self.completed = completed
    }

    // MARK: Internal

    static func == (lhs: DependencyCollectionItem, rhs: DependencyCollectionItem) -> Bool {
        return lhs.subject == rhs.subject && lhs.completed == rhs.completed
    }

    static func < (lhs: DependencyCollectionItem<T>, rhs: DependencyCollectionItem<T>) -> Bool {
        return lhs.subject < rhs.subject
    }

}

// MARK: - DependencyCollectionItem + Codable

extension DependencyCollectionItem: Codable where T == String {
    //
    enum CodingKeys: String, CodingKey {
        case subject
        case completed
    }

    init(from dictionary: [T: Any]) throws {
        let data = try JSONSerialization.data(withJSONObject: dictionary, options: [])
        let decoder = JSONDecoder()
        self = try decoder.decode(DependencyCollectionItem.self, from: data)
    }

    init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        subject = try container.decode(T.self, forKey: .subject)
        completed = try container.decode(Bool.self, forKey: .completed)
    }

    func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(subject, forKey: .subject)
        try container.encode(completed, forKey: .completed)
    }
}

extension DependencyCollectionItem where T == String {

    func serialized<T>(type _: T.Type) throws -> T? {
        let data = try JSONEncoder().encode(self)
        let result = try JSONSerialization.jsonObject(with: data, options: [])
        return result as? T
    }
}

// MARK: - DependencyCollectionItemObjCWrapper

/// Generated by OpenAI
@objc
public class DependencyCollectionItemObjCWrapper: NSObject {
    private let structInstance: DependencyCollectionItem<String>

    @objc
    public init(subject: String, completed: Bool) {
        structInstance = DependencyCollectionItem<String>(subject: subject, completed: completed)
    }

    @objc
    public init(dictionary: [String: Any]?) throws {
        guard let dictionary = dictionary else { throw DependencyCollectionItemObjCWrapperError.dictionaryIsNil }
        structInstance = try DependencyCollectionItem(from: dictionary)
    }

    @objc
    public var subject: String {
        return structInstance.subject
    }

    @objc
    public var completed: Bool {
        return structInstance.completed
    }

    private enum DependencyCollectionItemObjCWrapperError: Error {
        case dictionaryIsNil
    }
}
