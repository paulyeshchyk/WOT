//
//  DependencyCollectionItem.swift
//  ContextSDK
//
//  Created by Paul on 4.02.23.
//

typealias UOWStateSubject = Hashable & Equatable & Comparable

// MARK: - UOWState

struct UOWState<T: UOWStateSubject>: UOWStateSubject {

    typealias State = Int

    let subject: T
    let subordinatesInProgress: State

    // MARK: Lifecycle

    init(subject: T, subordinatesInProgress: State) {
        self.subject = subject
        self.subordinatesInProgress = subordinatesInProgress
    }

    // MARK: Internal

    static func == (lhs: UOWState, rhs: UOWState) -> Bool {
        return lhs.subject == rhs.subject && lhs.subordinatesInProgress == rhs.subordinatesInProgress
    }

    static func < (lhs: UOWState<T>, rhs: UOWState<T>) -> Bool {
        return lhs.subject < rhs.subject
    }
}

// MARK: - UOWState + Codable

extension UOWState: Codable where T == String {
    //
    enum CodingKeys: String, CodingKey {
        case subject
        case completed
    }

    init(from dictionary: [T: Any]) throws {
        let data = try JSONSerialization.data(withJSONObject: dictionary, options: [])
        let decoder = JSONDecoder()
        self = try decoder.decode(UOWState.self, from: data)
    }

    init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        subject = try container.decode(T.self, forKey: .subject)
        subordinatesInProgress = try container.decode(State.self, forKey: .completed)
    }

    func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(subject, forKey: .subject)
        try container.encode(subordinatesInProgress, forKey: .completed)
    }
}

extension UOWState where T == String {
    func serialized<T>(type _: T.Type) throws -> T? {
        let data = try JSONEncoder().encode(self)
        let result = try JSONSerialization.jsonObject(with: data, options: [])
        return result as? T
    }
}

// MARK: - DependencyCollectionItemObjCWrapper

/// Generated by OpenAI
@objc
public class DependencyCollectionItemObjCWrapper: NSObject {
    private let structInstance: UOWState<String>

    @objc
    public init(subject: String, subordinatesInProgress: Int) {
        structInstance = UOWState<String>(subject: subject, subordinatesInProgress: subordinatesInProgress)
    }

    @objc
    public init(dictionary: [String: Any]?) throws {
        guard let dictionary = dictionary else { throw DependencyCollectionItemObjCWrapperError.dictionaryIsNil }
        structInstance = try UOWState(from: dictionary)
    }

    @objc
    public var subject: String {
        return structInstance.subject
    }

    @objc
    public var completed: Bool {
        return (structInstance.subordinatesInProgress == 0)
    }

    private enum DependencyCollectionItemObjCWrapperError: Error {
        case dictionaryIsNil
    }
}
